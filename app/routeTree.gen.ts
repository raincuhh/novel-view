/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as readerReaderIndexImport } from './routes/(reader)/reader/index'
import { Route as dashboardDashboardLibrariesImport } from './routes/(dashboard)/dashboard/libraries'
import { Route as readerReaderBookIdChapterChapterIdIndexImport } from './routes/(reader)/reader/$bookId/chapter/$chapterId/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const readerReaderIndexRoute = readerReaderIndexImport.update({
  id: '/(reader)/reader/',
  path: '/reader/',
  getParentRoute: () => rootRoute,
} as any)

const dashboardDashboardLibrariesRoute =
  dashboardDashboardLibrariesImport.update({
    id: '/(dashboard)/dashboard/libraries',
    path: '/dashboard/libraries',
    getParentRoute: () => rootRoute,
  } as any)

const readerReaderBookIdChapterChapterIdIndexRoute =
  readerReaderBookIdChapterChapterIdIndexImport.update({
    id: '/(reader)/reader/$bookId/chapter/$chapterId/',
    path: '/reader/$bookId/chapter/$chapterId/',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(dashboard)/dashboard/libraries': {
      id: '/(dashboard)/dashboard/libraries'
      path: '/dashboard/libraries'
      fullPath: '/dashboard/libraries'
      preLoaderRoute: typeof dashboardDashboardLibrariesImport
      parentRoute: typeof rootRoute
    }
    '/(reader)/reader/': {
      id: '/(reader)/reader/'
      path: '/reader'
      fullPath: '/reader'
      preLoaderRoute: typeof readerReaderIndexImport
      parentRoute: typeof rootRoute
    }
    '/(reader)/reader/$bookId/chapter/$chapterId/': {
      id: '/(reader)/reader/$bookId/chapter/$chapterId/'
      path: '/reader/$bookId/chapter/$chapterId'
      fullPath: '/reader/$bookId/chapter/$chapterId'
      preLoaderRoute: typeof readerReaderBookIdChapterChapterIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard/libraries': typeof dashboardDashboardLibrariesRoute
  '/reader': typeof readerReaderIndexRoute
  '/reader/$bookId/chapter/$chapterId': typeof readerReaderBookIdChapterChapterIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard/libraries': typeof dashboardDashboardLibrariesRoute
  '/reader': typeof readerReaderIndexRoute
  '/reader/$bookId/chapter/$chapterId': typeof readerReaderBookIdChapterChapterIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(dashboard)/dashboard/libraries': typeof dashboardDashboardLibrariesRoute
  '/(reader)/reader/': typeof readerReaderIndexRoute
  '/(reader)/reader/$bookId/chapter/$chapterId/': typeof readerReaderBookIdChapterChapterIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard/libraries'
    | '/reader'
    | '/reader/$bookId/chapter/$chapterId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard/libraries'
    | '/reader'
    | '/reader/$bookId/chapter/$chapterId'
  id:
    | '__root__'
    | '/'
    | '/(dashboard)/dashboard/libraries'
    | '/(reader)/reader/'
    | '/(reader)/reader/$bookId/chapter/$chapterId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  dashboardDashboardLibrariesRoute: typeof dashboardDashboardLibrariesRoute
  readerReaderIndexRoute: typeof readerReaderIndexRoute
  readerReaderBookIdChapterChapterIdIndexRoute: typeof readerReaderBookIdChapterChapterIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  dashboardDashboardLibrariesRoute: dashboardDashboardLibrariesRoute,
  readerReaderIndexRoute: readerReaderIndexRoute,
  readerReaderBookIdChapterChapterIdIndexRoute:
    readerReaderBookIdChapterChapterIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(dashboard)/dashboard/libraries",
        "/(reader)/reader/",
        "/(reader)/reader/$bookId/chapter/$chapterId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(dashboard)/dashboard/libraries": {
      "filePath": "(dashboard)/dashboard/libraries.tsx"
    },
    "/(reader)/reader/": {
      "filePath": "(reader)/reader/index.tsx"
    },
    "/(reader)/reader/$bookId/chapter/$chapterId/": {
      "filePath": "(reader)/reader/$bookId/chapter/$chapterId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
